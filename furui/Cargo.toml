[package]
name = "furui"
version = "0.1.0"
edition = "2021"

[dependencies]
furui-common = { path = "../furui-common", features = ["user"] }

anyhow = { workspace = true, default-features = true }
aya = { workspace = true }
aya-log = { workspace = true }
aya-ebpf = { workspace = true }
env_logger = { workspace = true }
libc = { workspace = true }
log = { workspace = true }
tokio = { workspace = true, features = ["macros", "rt", "rt-multi-thread", "net", "signal"] }

clap = { workspace = true, features = ["derive"] }

tracing = "0.1"
tracing-core = "0.1"
tracing-log = "0.1"
tracing-subscriber = { version = "0.3", features = ["json"] }
serde = "1.0"
serde_derive = "1.0"
serde_yaml = "0.9.13"
serde_json = "1.0"
bytes = "1.1"
chrono = "0.4"
dns-lookup = "1.0.8"
bollard = "0.13.0"
futures = "0.3.21"
thiserror = "1"
pnet_datalink = "0.31.0"
md5 = "0.7.0"
prost = "0.13"
prost-types = "0.13"
tonic = "0.12"
tower = "0.5"
hyper-util = "0.1"


[build-dependencies]
cargo_metadata = { workspace = true }
# (https://github.com/rust-lang/cargo/issues/12375): this should be an artifact dependency, but
# it's not possible to tell cargo to use `-Z build-std` to build it. We cargo-in-cargo in the build
# script to build this, but we want to teach cargo about the dependecy so that cache invalidation
# works properly.
#
# Note also that https://github.com/rust-lang/cargo/issues/10593 occurs when `target = ...` is added
# to an artifact dependency; it seems possible to work around that by setting `resolver = "1"` in
# Cargo.toml in the workspace root.
#
# Finally note that *any* usage of `artifact = ...` in *any* Cargo.toml in the workspace breaks
# workflows with stable cargo; stable cargo outright refuses to load manifests that use unstable
# features.
furui-ebpf = { path = "../furui-ebpf" }

protobuf-src = "*"
tonic-build = "0.12"

[[bin]]
name = "furui"
path = "src/main.rs"
